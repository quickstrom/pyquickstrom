import quickstrom;

// temporary definition here
let eventually'(~p) = true until {100} p;

let ~remaining = parseInt(`#remaining`.textContent);
let ~started = `#toggle`.textContent == "Stop";
let ~stopped = `#toggle`.textContent == "Start";

action ~start! = click!(`#toggle`) when stopped;
action ~stop! = click!(`#toggle`) when started;
action ~wait! = noop! timeout 1000 when started;
action ~tick? = changed?(`#remaining`);

let ~ticking =
    let old = remaining;
    started
        && nextT (
            // contains(tick?, happened) &&
            remaining == old - 1
            && if remaining == 0 { stopped } else { started }
        );
let ~waiting = 
    // nextT(contains(wait!, happened)) && 
    unchanged([remaining, started, stopped]);
let ~starting = stopped && nextT(
    // contains(start!, happened) && 
    if remaining == 0 { stopped } else { started });
let ~stopping = started && nextT(
    // contains(stop!, happened) && 
    stopped);
let ~safety = 
    contains(loaded?, happened)
        && always(starting || stopping || waiting || ticking);
let ~liveness =
    always(contains(start!, happened) ==> eventually'(stopped));
let ~goesToZero =
    always(contains(start!, happened) ==> eventually'(remaining == 0));

let ~prop = safety && liveness && goesToZero;

check prop with * when loaded?;
