//-------------------------------------------------
// Operators
//-------------------------------------------------

syntax _ becomes <_ 8;
let ~x becomes < n = nextT (x != null && n != null && x < n);

syntax _becomes <=_ 8;
let ~x becomes <= n = nextT (x != null && n != null && x <= n);

syntax _becomes >_ 8;
let ~x becomes > n = nextT (x != null && n != null && x > n);

syntax _becomes >=_ 8;
let ~x becomes >= n = nextT (x != null && n != null && x >= n);

syntax _+=_ 8;
let ~x += n = freeze x' = x { nextT (x == x' + n) };

syntax _-=_ 8;
let ~x -= n = freeze x' = x { nextT (x == x' - n) };

syntax _becomes_ 8;
let ~a becomes b = nextT (a == b);

syntax _does not become_ 8;
let ~a does not become b = nextT (a != b);

let nowOrNextT(~p) = p || nextT p;