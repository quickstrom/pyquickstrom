import quickstrom;

syntax _becomes_ 8;
let ~a becomes b = nextT (a == b);

syntax _?._ 9;
let a ?. b = if a != null { a[b] };

syntax _?:_ 8;
let a ?: ~b = if a != null { a } else { b };

let ~input =
  first(
    for i in `input[type=text]` {
      { message: i.value, active: i.active }
    }
  );

let ~trimmedInputMessage =
  if input != null {
    trim(input.message)
  };

let ~inputActive = input ?. "active" ?: false;

let ~submittedMessage =
  first(
    for p in `#message` {
      if p.visible { p.textContent }
    }
  );

action ~submit! = click!(`input[type=submit]`);
action ~focusInput! = focus!(`input[type=text]`);
action ~pressKey! = [
  keyPress!(keys.space),
  keyPress!("a")
] when inputActive;

let ~prop = 
  let ~initial = input ?. "message" == "";
  
  let ~enterMessage = changed(input ?. "message");

  let ~focusInput = not inputActive && nextT inputActive;

  let ~submitInvalidMessage =
    trimmedInputMessage == ""
      && submittedMessage == null
      && nextT(submittedMessage == null);

  let ~submitValidMessage =
    trimmedInputMessage != ""
      && submittedMessage == null
      && submittedMessage becomes input ?. "message"
      && input becomes null;
  
  initial && ((focusInput || enterMessage || submitInvalidMessage) until {100} submitValidMessage);

check prop with * when loaded?;

